[project]
name = "django-starter-project"
version = "0.1.0"
description = "Quite THE Opinionated django starter boilerplate"
authors = [
    {name = "Cynthia Wahome", email = "xcyclone.cycy@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["django", "template", "modern", "uv", "ruff", "mypy"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: Django :: 5.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core Django
    "django>=5.2.0",
    "django-environ>=0.11.2",
    "psycopg[binary]>=3.1.13",
    
    # Task Queue & Cache
    "celery[redis]>=5.3.4",
    "redis>=5.0.1",
    
    # API & CORS
    "djangorestframework>=3.14.0",
    "django-cors-headers>=4.3.1",
    
    # File Handling
    "pillow>=10.1.0",
    "django-storages[s3]>=1.14.2",
    
    # Security & Monitoring
    "sentry-sdk[django]>=1.38.0",
    "django-csp>=3.7",
    "django-permissions-policy>=4.19.0",
    
    # Frontend Integration
    "django-webpack-loader>=3.0.1",
]

[project.optional-dependencies]
development = [
    # Code Quality
    "ruff>=0.1.6",
    "mypy>=1.7.1",
    "django-stubs[compatible-mypy]>=4.2.7",
    
    # Testing
    "pytest>=7.4.3",
    "pytest-django>=4.7.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.1",
    "hypothesis[django]>=6.92.1",
    "factory-boy>=3.3.0",
    
    # Development Tools
    "django-debug-toolbar>=4.2.0",
    "django-extensions>=3.2.3",
    "pre-commit>=3.5.0",
    
    # Documentation
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=1.3.0",
]

production = [
    "gunicorn>=21.2.0",
    "whitenoise>=6.6.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Ruff configuration for blazing-fast linting and formatting
[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # bandit security
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "DJ",  # flake8-django
    "T20", # flake8-print
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "DJ01",  # avoid using null=True on string-based fields
]

[tool.ruff.lint.per-file-ignores]
"*/migrations/*.py" = ["E501", "N806", "N999"]
"*/settings/*.py" = ["F403", "F401"]
"*/tests/*.py" = ["S101", "S106"]
"manage.py" = ["T20"]

[tool.ruff.lint.isort]
known-first-party = ["apps", "conf", "common"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# MyPy configuration for static type checking
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "conf.settings"

# Pytest configuration
[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "conf.settings.testing"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
testpaths = ["tests"]
addopts = "-v --tb=short --strict-markers --cov=apps --cov=common --cov-report=term-missing"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["apps", "common"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "manage.py",
    "*/settings/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.hatch.build.targets.wheel]
packages = ["apps"]
